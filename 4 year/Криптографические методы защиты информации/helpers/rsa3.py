# -*- coding: utf-8 -*-
from base import xgcd, mpow, modinv

c1_list = [
    400408320444,
    241545246801,
    282223079755,
    490328978748,
    350509811006,
    142356755075,
    109547314116,
    414823859933,
    330990395685,
    377471732609,
    44017319588,
    499241372980,
    171071879560,
]
c2_list = [
    374984721363,
    438491303024,
    498951362977,
    218681974856,
    365827206348,
    175049781656,
    359111505460,
    297734746741,
    96963152197,
    362138584797,
    102758207364,
    37817394150,
    120430068125,
]


c1 = 4004083204442415452468012822230797554903289787483505098110061423567550751095473141164148238599333309903956853774717326094401731958849924137298017107187956
c2 = 3749847213634384913030244989513629772186819748563658272063481750497816563591115054602977347467419696315219736213858479710275820736437817394150120430068125


N = 357114156277
e1 = 1025537
e2 = 722983

result = []


_, r, s = xgcd(e1, e2)

if (e1 * r + e2 * s) != 1:
    r, s = s, r

print(
    f"\\item Решаем уравнение $e_1 \\cdot r – e_2 \\cdot s = \\pm 1$. Для этого в поле A помещаем значение $e_1$, в поле B – значение $e_2$. Нажимаем кнопку «A $\\cdot$ D – B $\\cdot$ C = N»; C = s = {s}; D = r = {r}"
)


def step1(c1, c2, _r, _s):
    if _r < 0:
        c1 = modinv(c1, N)
        print(f"c1={c1}")

    if _s < 0:
        c2 = modinv(abs(c2), N)

    c1_r = mpow(c1, abs(_r), N)
    c2_s = mpow(c2, abs(_s), N)

    result_big = c1_r * c2_s
    result_small = (c1_r % N) * (c2_s % N) % N

    result.append(result_small)
    print(f"\\item $c_1 = {c1}$, $c_2={c2}$")
    print(
        f"\\item Производим дешифрацию: $c_1$ возводим в степень $r$, а $c_2$ – в степень $–s$ по модулю $N$, тогда $c_1 ^ r = {c1_r}$, $c_2 ^{{–s}} = {c2_s}$."
    )
    print(
        f"\\item После этого результаты перемножаем и получаем, что $m ^ {{e1 \\cdot r – e2 \\cdot s}} = \\seqsplit{{{result_big}}}$. Далее берём модуль от полученного значения:  $m ^ {{(e1 \\cdot r – e2 \\cdot s)}} mod N) = {result_small}$ и преобразуем в текст <<>>"
    )


for _c1, _c2 in zip(c1_list, c2_list):
    step1(_c1, _c2, r, s)

# step1(c1, c2, r, s)

print(result)
